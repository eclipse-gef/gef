/*******************************************************************************
 * Copyright (c) 2017 itemis AG and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * SPDX-License-Identifier: EPL-2.0
 *
 * Contributors:
 *     Matthias Wienand (itemis AG) - initial API and implementation
 *     Tamas Miklossy   (itemis AG) - initial API and implementation
 *******************************************************************************/
grammar org.eclipse.gef.dot.internal.language.DotHtmlLabel hidden(HTML_COMMENT)

generate htmllabel "http://www.eclipse.org/gef/dot/internal/language/DotHtmlLabel"
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

/*
 * This grammar comes with a custom lexer to scan HTML-like labels. Such a label is surrounded
 * by angle brackets ('<' and '>') in the host Dot language. However, this grammar is used to
 * analyze the contents of such strings. This grammar definition is based on the following tutorial:
 * https://theantlrguy.atlassian.net/wiki/spaces/ANTLR3/pages/2687107/Parsing+XML
 */

HtmlLabel: (parts+=HtmlContent)*;
HtmlContent: tag=HtmlTag | text=TEXT;

/*
 * FIXME: 'HtmlTag' should not support the 'closeName' feature. The closeName is only needed for
 * validation to check if the tag is opened and closed with the same name.
 */
HtmlTag hidden(WS, HTML_COMMENT): TAG_START name=ID (attributes+=HtmlAttr)*
	( selfClosing?=TAG_END_CLOSE
	| TAG_END (children+=HtmlContent)* TAG_START_CLOSE closeName=ID TAG_END
	);

HtmlAttr: name=ID WS? ASSIGN WS? value=ATTR_VALUE;

terminal HTML_COMMENT: '<!--' (!('-') | '-' !('-') | '-' '-' !('>'))* '-->'; // if not tag-mode

terminal TAG_START_CLOSE: '</'; // if not tag-mode: tag-mode=true
terminal TAG_START      :  '<'; // if not tag-mode: tag-mode=true
terminal TAG_END        :  '>'; // if tag-mode: tag-mode=false
terminal TAG_END_CLOSE  : '/>'; // if tag-mode: tag-mode=false

terminal ASSIGN: '='; // if tag-mode
terminal ATTR_VALUE: ('"' (!'"')* '"') | ('\'' (!'\'')* '\'' ); // if tag-mode
terminal ID: ('_'|'a'..'z'|'A'..'Z') ('_'|'-'|'a'..'z'|'A'..'Z'|'0'..'9')*; // if tag-mode
terminal WS: (' '|'\t'|'\n'|'\r'|'\f')+; // if tag-mode

terminal TEXT: (!'<')+; // if not tag-mode